{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","Dialogitem","props","path","id","className","classes","dialogItem","to","name","Message","messageItem","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","dialog","key","messagesElements","messages","isAuth","dialogItems","messageItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,8BAA8B,WAAa,8B,+FCmB3IC,EAhBI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAQC,YACpB,kBAAC,IAAD,CAEIC,GAAIL,GAEHD,EAAMO,QCCRC,EAVC,SAACR,GACb,OACI,yBAAKG,UAAWC,IAAQK,aACnBT,EAAMU,U,yCC+CbC,EAAeC,YAAiB,KA0BhCC,EAAsBC,YAAU,CAClCC,KAAM,wBADkBD,EAxBL,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,iBAAiBc,YAAY,qBACvDC,SAAU,CAACC,IAAUZ,MAWhC,6BAEI,6CAWDa,EAzEC,SAACxB,GAEb,IAAIyB,EAAQzB,EAAM0B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAAYvB,KAAMuB,EAAOvB,KAAML,GAAI4B,EAAO5B,GAAI6B,IAAKD,EAAO5B,QACxG8B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAnB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAASA,EAAQA,QAASqB,IAAKrB,EAAQR,QAmBrG,OAAKF,EAAMkC,OAGP,yBAAK/B,UAAWC,IAAQwB,SACpB,yBAAKzB,UAAWC,IAAQ+B,aAEnBR,GAGL,yBAAKxB,UAAWC,IAAQgC,cAEpB,6BAAMJ,GACN,kBAACnB,EAAD,CAAqBG,SAhBb,SAACqB,GACjBrC,EAAMsC,YAAYD,EAAOE,qBAGH,kBAAC,IAAD,CAAUjC,GAAI,Y,gDC7BxCkC,EAA6B,SAACf,GAAD,MAAY,CACzCS,OAAQT,EAAMgB,KAAKP,S,OC8DRQ,sBACXC,aA3BkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACkB,GACtB,MAAO,CACHN,YAAa,SAACC,GACVK,EAASC,YAAmBN,UDvCR,SAACO,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKhD,MAAMkC,OAET,kBAACY,EAAcE,KAAKhD,OAFI,kBAAC,IAAD,CAAUM,GAAG,eAJT,GAEX2C,IAAMH,WAYtC,OAFiCH,YAAQH,EAARG,CAAoCI,KC4C1DL,CAIZlB","file":"static/js/5.52126e70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__5c0k_\",\"dialogItems\":\"Dialogs_dialogItems__2NGfA\",\"messageItems\":\"Dialogs_messageItems__3byRV\",\"dialogItem\":\"Dialogs_dialogItem__13H5J\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.scss'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Dialogitem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return(\r\n        <div className={classes.dialogItem}>\r\n            <NavLink\r\n                // to={`/dialogs/${props.id}`}\r\n                to={path}\r\n            >\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogitem","import React from \"react\";\r\nimport classes from './../Dialogs.module.scss'\r\n\r\nconst Message = (props) => {\r\n    return(\r\n        <div className={classes.messageItem}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message","import React from \"react\";\r\nimport classes from './Dialogs.module.scss'\r\nimport Dialogitem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FromControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(dialog => <Dialogitem name={dialog.name} id={dialog.id} key={dialog.id}/>);\r\n    let messagesElements = state.messages.map(message => <Message message={message.message} key={message.id}/>);\r\n    // let newMessageBody = state.newMessageBody;\r\n\r\n\r\n\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage();\r\n    //     // props.fake_store.dispatch(sendMessageCreator());\r\n    // };\r\n\r\n    // let onNewMessageChange = (e) => {\r\n    //    let body = e.target.value;\r\n    //     props.updateNewMessageBody(body);\r\n    // };\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'} />;\r\n\r\n    return(\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n\r\n                {dialogsElements}\r\n\r\n            </div>\r\n            <div className={classes.messageItems}>\r\n\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst maxLength100 = maxLengthCreator(100);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your Message\"\r\n                       validate={[required, maxLength100]}\r\n\r\n                />\r\n                        {/*<textarea*/}\r\n                        {/*    value={newMessageBody}*/}\r\n                        {/*    placeholder=\"Enter your Message\"*/}\r\n                        {/*    onChange={onNewMessageChange}*/}\r\n                        {/*>*/}\r\n\r\n                        {/*</textarea>*/}\r\n            </div>\r\n            <div>\r\n                {/*<button onClick={onSendMessageClick}>Send</button>*/}\r\n                <button>SEND</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n};","import {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect.js\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// const DialogsContainer = (props) => {\r\n//\r\n//     // let state = props.fake_store.getState().dialogsPage;\r\n//     //\r\n//     // let onSendMessageClick = () => {\r\n//     //     props.fake_store.dispatch(sendMessageCreator());\r\n//     // }\r\n//     //\r\n//     // let onNewMessageChange = (body) => {\r\n//     //    props.fake_store.dispatch(updateNewMessageBodyCreator(body));\r\n//     // }\r\n//\r\n//     return <StoreContext.Consumer>\r\n//             {\r\n//                 (fake_store) => {\r\n//\r\n//                     let state = fake_store.getState().dialogsPage;\r\n//\r\n//                     let onSendMessageClick = () => {\r\n//                         fake_store.dispatch(sendMessageCreator());\r\n//                     };\r\n//\r\n//                     let onNewMessageChange = (body) => {\r\n//                         fake_store.dispatch(updateNewMessageBodyCreator(body));\r\n//                     };\r\n//\r\n//                     return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                              sendMessage={onSendMessageClick}\r\n//                              dialogsPage={state}\r\n//                     />\r\n//                 }\r\n//         }\r\n//         </StoreContext.Consumer>\r\n// }\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        },\r\n        // updateNewMessageBody: (body) => {\r\n        //     dispatch(updateNewMessageBodyCreator(body));\r\n        // },\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n/*let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n\r\nconst DialogsContainer = connect(mapStateToProps,mapDispatchToProps) (AuthRedirectComponent);*/\r\n\r\n// export default DialogsContainer\r\nexport default compose (\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n//    c низу вверх\r\n) (Dialogs);\r\n\r\n"],"sourceRoot":""}